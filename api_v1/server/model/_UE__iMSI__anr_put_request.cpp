/**
* E2 Node API
* No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
*
* The version of the OpenAPI document: 1.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "_UE__iMSI__anr_put_request.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

_UE__iMSI__anr_put_request::_UE__iMSI__anr_put_request()
{
    m_Nodeb_listIsSet = false;
    
}

void _UE__iMSI__anr_put_request::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool _UE__iMSI__anr_put_request::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool _UE__iMSI__anr_put_request::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "_UE__iMSI__anr_put_request" : pathPrefix;

         
    if (nodebListIsSet())
    {
        const std::vector<org::openapitools::server::model::Anr_payload>& value = m_Nodeb_list;
        const std::string currentValuePath = _pathPrefix + ".nodebList";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const org::openapitools::server::model::Anr_payload& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".nodebList") && success;
 
                i++;
            }
        }

    }
    
    return success;
}

bool _UE__iMSI__anr_put_request::operator==(const _UE__iMSI__anr_put_request& rhs) const
{
    return
    
    
    
    ((!nodebListIsSet() && !rhs.nodebListIsSet()) || (nodebListIsSet() && rhs.nodebListIsSet() && getNodebList() == rhs.getNodebList()))
    
    ;
}

bool _UE__iMSI__anr_put_request::operator!=(const _UE__iMSI__anr_put_request& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const _UE__iMSI__anr_put_request& o)
{
    j = nlohmann::json::object();
    if(o.nodebListIsSet() || !o.m_Nodeb_list.empty())
        j["nodeb_list"] = o.m_Nodeb_list;
    
}

void from_json(const nlohmann::json& j, _UE__iMSI__anr_put_request& o)
{
    if(j.find("nodeb_list") != j.end())
    {
        j.at("nodeb_list").get_to(o.m_Nodeb_list);
        o.m_Nodeb_listIsSet = true;
    } 
    
}

std::vector<org::openapitools::server::model::Anr_payload> _UE__iMSI__anr_put_request::getNodebList() const
{
    return m_Nodeb_list;
}
void _UE__iMSI__anr_put_request::setNodebList(std::vector<org::openapitools::server::model::Anr_payload> const& value)
{
    m_Nodeb_list = value;
    m_Nodeb_listIsSet = true;
}
bool _UE__iMSI__anr_put_request::nodebListIsSet() const
{
    return m_Nodeb_listIsSet;
}
void _UE__iMSI__anr_put_request::unsetNodeb_list()
{
    m_Nodeb_listIsSet = false;
}


} // namespace org::openapitools::server::model

