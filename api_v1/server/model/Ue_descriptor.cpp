/**
* E2 Node API
* No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
*
* The version of the OpenAPI document: 1.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "Ue_descriptor.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

Ue_descriptor::Ue_descriptor()
{
    m_Endpoint = "";
    
}

void Ue_descriptor::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool Ue_descriptor::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool Ue_descriptor::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "Ue_descriptor" : pathPrefix;

    try{    
        m_Data_plane_flow.validate();
    } catch(org::openapitools::server::helpers::ValidationException) {
        msg << _pathPrefix << ": Data_plane_flow is invalid;";
        success = false;
    }
    
    /* Anr_payload */ {
        const std::vector<org::openapitools::server::model::Anr_payload>& value = m_Anr_payload;
        const std::string currentValuePath = _pathPrefix + ".anrPayload";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const org::openapitools::server::model::Anr_payload& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".anrPayload") && success;
 
                i++;
            }
        }

    }
        
    return success;
}

bool Ue_descriptor::operator==(const Ue_descriptor& rhs) const
{
    return
    
    
    (getDataPlaneFlow() == rhs.getDataPlaneFlow())
     &&
    
    (getAnrPayload() == rhs.getAnrPayload())
     &&
    
    (getEndpoint() == rhs.getEndpoint())
    
    
    ;
}

bool Ue_descriptor::operator!=(const Ue_descriptor& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const Ue_descriptor& o)
{
    j = nlohmann::json::object();
    j["data_plane_flow"] = o.m_Data_plane_flow;
    j["anr_payload"] = o.m_Anr_payload;
    j["endpoint"] = o.m_Endpoint;
    
}

void from_json(const nlohmann::json& j, Ue_descriptor& o)
{
    j.at("data_plane_flow").get_to(o.m_Data_plane_flow);
    j.at("anr_payload").get_to(o.m_Anr_payload);
    j.at("endpoint").get_to(o.m_Endpoint);
    
}

org::openapitools::server::model::Data_plane_flow Ue_descriptor::getDataPlaneFlow() const
{
    return m_Data_plane_flow;
}
void Ue_descriptor::setDataPlaneFlow(org::openapitools::server::model::Data_plane_flow const& value)
{
    m_Data_plane_flow = value;
}
std::vector<org::openapitools::server::model::Anr_payload> Ue_descriptor::getAnrPayload() const
{
    return m_Anr_payload;
}
void Ue_descriptor::setAnrPayload(std::vector<org::openapitools::server::model::Anr_payload> const& value)
{
    m_Anr_payload = value;
}
std::string Ue_descriptor::getEndpoint() const
{
    return m_Endpoint;
}
void Ue_descriptor::setEndpoint(std::string const& value)
{
    m_Endpoint = value;
}


} // namespace org::openapitools::server::model

