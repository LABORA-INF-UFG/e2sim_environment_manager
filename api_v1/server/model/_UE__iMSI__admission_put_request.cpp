/**
* E2 Node API
* No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
*
* The version of the OpenAPI document: 1.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "_UE__iMSI__admission_put_request.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

_UE__iMSI__admission_put_request::_UE__iMSI__admission_put_request()
{
    m_Nodeb = "";
    m_NodebIsSet = false;
    m_UeIsSet = false;
    
}

void _UE__iMSI__admission_put_request::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool _UE__iMSI__admission_put_request::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool _UE__iMSI__admission_put_request::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "_UE__iMSI__admission_put_request" : pathPrefix;

            
    return success;
}

bool _UE__iMSI__admission_put_request::operator==(const _UE__iMSI__admission_put_request& rhs) const
{
    return
    
    
    
    ((!nodebIsSet() && !rhs.nodebIsSet()) || (nodebIsSet() && rhs.nodebIsSet() && getNodeb() == rhs.getNodeb())) &&
    
    
    ((!ueIsSet() && !rhs.ueIsSet()) || (ueIsSet() && rhs.ueIsSet() && getUe() == rhs.getUe()))
    
    ;
}

bool _UE__iMSI__admission_put_request::operator!=(const _UE__iMSI__admission_put_request& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const _UE__iMSI__admission_put_request& o)
{
    j = nlohmann::json::object();
    if(o.nodebIsSet())
        j["nodeb"] = o.m_Nodeb;
    if(o.ueIsSet())
        j["ue"] = o.m_Ue;
    
}

void from_json(const nlohmann::json& j, _UE__iMSI__admission_put_request& o)
{
    if(j.find("nodeb") != j.end())
    {
        j.at("nodeb").get_to(o.m_Nodeb);
        o.m_NodebIsSet = true;
    } 
    if(j.find("ue") != j.end())
    {
        j.at("ue").get_to(o.m_Ue);
        o.m_UeIsSet = true;
    } 
    
}

std::string _UE__iMSI__admission_put_request::getNodeb() const
{
    return m_Nodeb;
}
void _UE__iMSI__admission_put_request::setNodeb(std::string const& value)
{
    m_Nodeb = value;
    m_NodebIsSet = true;
}
bool _UE__iMSI__admission_put_request::nodebIsSet() const
{
    return m_NodebIsSet;
}
void _UE__iMSI__admission_put_request::unsetNodeb()
{
    m_NodebIsSet = false;
}
org::openapitools::server::model::Ue_descriptor _UE__iMSI__admission_put_request::getUe() const
{
    return m_Ue;
}
void _UE__iMSI__admission_put_request::setUe(org::openapitools::server::model::Ue_descriptor const& value)
{
    m_Ue = value;
    m_UeIsSet = true;
}
bool _UE__iMSI__admission_put_request::ueIsSet() const
{
    return m_UeIsSet;
}
void _UE__iMSI__admission_put_request::unsetUe()
{
    m_UeIsSet = false;
}


} // namespace org::openapitools::server::model

