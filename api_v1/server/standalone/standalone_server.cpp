/**
 * E2 Node API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
#include <envman/environment_manager.h>
#include <iostream>

#ifdef __linux__
#include <vector>
#include <signal.h>
#include <unistd.h>
#endif

//#define PISTACHE_SERVER_THREADS 2
//#define PISTACHE_SERVER_MAX_REQUEST_SIZE 32768
//#define PISTACHE_SERVER_MAX_RESPONSE_SIZE 32768

EnvironmentManager *manager;

class MyObserver : public EnvironmentManagerObserver {

public:
    MyObserver();
    ~MyObserver();

    /**
     * Notifies the observer about a new ANR update.
     */
    void anrUpdate(const std::string iMSI,
        const std::map<std::string, std::shared_ptr<anr_entry>> &entries);

    /**
     * Notifies the observer about a new Flow update.
     */
    void flowUpdate(const std::string iMSI, const flow_entry &entry);

    /**
     * Notifies the observer about a new UE requessting association.
     */
    void associationRequest(const std::shared_ptr<ue_data> ue);

    /**
     * Notifiess the observer about a new UE requesting disassociation.
     */
    void disassociationRequest(const std::shared_ptr<ue_data> ue);
};

MyObserver::MyObserver()
{ /* pass */ }

MyObserver::~MyObserver()
{ /* pass */ }

void MyObserver::anrUpdate(const std::string iMSI,
                           const std::map<std::string, std::shared_ptr<anr_entry>> &entries)
{
    std::cout << "ANR update from " << iMSI;
    std::cout << std::endl;
}

void MyObserver::flowUpdate(const std::string iMSI, const flow_entry &entry) {
    std::cout << "Flow update from " << iMSI
              << " average throughput " << entry.average_throughput
              << " latency " << entry.latency << std::endl;
}

void MyObserver::associationRequest(const std::shared_ptr<ue_data> ue) {
    std::cout << "Association request from " << ue->imsi << std::endl;
}

void MyObserver::disassociationRequest(const std::shared_ptr<ue_data> ue)
{
    std::cout << "Association request from " << ue->imsi << std::endl;
}

#ifdef __linux__
    static void sigHandler [[noreturn]] (int sig)
{
    switch (sig)
    {
    case SIGINT:
    case SIGQUIT:
    case SIGTERM:
    case SIGHUP:
    default:
        manager->stop();
        break;
    }
    exit(0);
}

static void setUpUnixSignals(std::vector<int> quitSignals)
{
    sigset_t blocking_mask;
    sigemptyset(&blocking_mask);
    for (auto sig : quitSignals)
        sigaddset(&blocking_mask, sig);

    struct sigaction sa;
    sa.sa_handler = sigHandler;
    sa.sa_mask = blocking_mask;
    sa.sa_flags = 0;

    for (auto sig : quitSignals)
        sigaction(sig, &sa, nullptr);
}
#endif

int main()
{
    std::shared_ptr<MyObserver> observer = std::make_shared<MyObserver>();
    manager = new EnvironmentManager(8081, 2);
    manager->add_observer(observer, ENVMAN_OBSERVE_ALL);
    manager->start();
}
