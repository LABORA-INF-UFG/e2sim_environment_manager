# coding: utf-8

"""
    E2 Node UE API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr
from pydantic import Field
from typing import Dict, Any
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class UEIMSIPutRequestAvailableGNBsInner(BaseModel):
    """
    UEIMSIPutRequestAvailableGNBsInner
    """
    g_nb_id: StrictStr = Field(description="Identifier of the gNB.", alias="gNB_ID")
    g_nb_rsrp: StrictInt = Field(description="Reference Signal Received Power from this gNB in dBm.", alias="gNB_RSRP")
    g_nb_rssi: Optional[StrictInt] = Field(default=None, description="Reference Signal Strength Indicator from this gNB in dBm.", alias="gNB_RSSI")
    g_nb_rsrq: Optional[StrictInt] = Field(default=None, description="Reference Signal Stringth Quality from this gNB ins dBm.", alias="gNB_RSRQ")
    connected: Optional[StrictBool] = Field(default=None, description="Status of the gNB. Can be \"true\" to connected or \"false\" to disconnected.")
    __properties: ClassVar[List[str]] = ["gNB_ID", "gNB_RSRP", "gNB_RSSI", "gNB_RSRQ", "connected"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of UEIMSIPutRequestAvailableGNBsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.model_dump(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Self:
        """Create an instance of UEIMSIPutRequestAvailableGNBsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "gNB_ID": obj.get("gNB_ID"),
            "gNB_RSRP": obj.get("gNB_RSRP"),
            "gNB_RSSI": obj.get("gNB_RSSI"),
            "gNB_RSRQ": obj.get("gNB_RSRQ"),
            "connected": obj.get("connected")
        })
        return _obj


