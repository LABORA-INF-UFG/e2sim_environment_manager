# coding: utf-8

"""
    E2 Node UE API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional, Union
from pydantic import BaseModel, StrictFloat, StrictInt
from pydantic import Field
from openapi_client.models.ueimsi_put_request_available_gnbs_inner import UEIMSIPutRequestAvailableGNBsInner
from typing import Dict, Any
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class UEIMSIPutRequest(BaseModel):
    """
    UEIMSIPutRequest
    """
    average_throughput: Union[StrictFloat, StrictInt] = Field(description="Average throughput in Mbps. Required if updating or creating.", alias="averageThroughput")
    latency: StrictInt = Field(description="Latency in milliseconds. Required if updating or creating.")
    rsrp: Optional[StrictInt] = Field(default=None, description="Reference Signal Received Power in dBm. Optional if updating.", alias="RSRP")
    sinr: Optional[StrictInt] = Field(default=None, description="Signal-to-Interference-plus-Noise Ratio in dB. Optional if updating.", alias="SINR")
    cqi: Optional[StrictInt] = Field(default=None, description="Channel Quality Indicator. Optional if updating.", alias="CQI")
    rsrq: Optional[StrictInt] = Field(default=None, description="Reference Signal Received Quality. Optional if updating.", alias="RSRQ")
    bler: Optional[StrictInt] = Field(default=None, description="Block Error Rate in percentage. Optional if updating.", alias="BLER")
    available_g_nbs: Optional[List[UEIMSIPutRequestAvailableGNBsInner]] = Field(default=None, description="List of available gNB and their respective RSRP and RSSI in dBm. Optional if updating.", alias="available_gNBs")
    __properties: ClassVar[List[str]] = ["averageThroughput", "latency", "RSRP", "SINR", "CQI", "RSRQ", "BLER", "available_gNBs"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of UEIMSIPutRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.model_dump(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in available_g_nbs (list)
        _items = []
        if self.available_g_nbs:
            for _item in self.available_g_nbs:
                if _item:
                    _items.append(_item.to_dict())
            _dict['available_gNBs'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Self:
        """Create an instance of UEIMSIPutRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "averageThroughput": obj.get("averageThroughput"),
            "latency": obj.get("latency"),
            "RSRP": obj.get("RSRP"),
            "SINR": obj.get("SINR"),
            "CQI": obj.get("CQI"),
            "RSRQ": obj.get("RSRQ"),
            "BLER": obj.get("BLER"),
            "available_gNBs": [UEIMSIPutRequestAvailableGNBsInner.from_dict(_item) for _item in obj.get("available_gNBs")] if obj.get("available_gNBs") is not None else None
        })
        return _obj


