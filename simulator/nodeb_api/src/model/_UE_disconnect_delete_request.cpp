/**
 * UE Manager API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.1.0-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/_UE_disconnect_delete_request.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



_UE_disconnect_delete_request::_UE_disconnect_delete_request()
{
    m_Imsi = utility::conversions::to_string_t("");
    m_ImsiIsSet = false;
}

_UE_disconnect_delete_request::~_UE_disconnect_delete_request()
{
}

void _UE_disconnect_delete_request::validate()
{
    // TODO: implement validation
}

web::json::value _UE_disconnect_delete_request::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_ImsiIsSet)
    {
        val[utility::conversions::to_string_t(U("imsi"))] = ModelBase::toJson(m_Imsi);
    }

    return val;
}

bool _UE_disconnect_delete_request::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("imsi"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("imsi")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setImsi;
            ok &= ModelBase::fromJson(fieldValue, refVal_setImsi);
            setImsi(refVal_setImsi);
        }
    }
    return ok;
}

void _UE_disconnect_delete_request::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_ImsiIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("imsi")), m_Imsi));
    }
}

bool _UE_disconnect_delete_request::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("imsi"))))
    {
        utility::string_t refVal_setImsi;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("imsi"))), refVal_setImsi );
        setImsi(refVal_setImsi);
    }
    return ok;
}

utility::string_t _UE_disconnect_delete_request::getImsi() const
{
    return m_Imsi;
}

void _UE_disconnect_delete_request::setImsi(const utility::string_t& value)
{
    m_Imsi = value;
    m_ImsiIsSet = true;
}

bool _UE_disconnect_delete_request::imsiIsSet() const
{
    return m_ImsiIsSet;
}

void _UE_disconnect_delete_request::unsetImsi()
{
    m_ImsiIsSet = false;
}
}
}
}
}


