/**
* E2 Node UE API
* No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
*
* The version of the OpenAPI document: 1.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * _UE__IMSI__put_request.h
 *
 * 
 */

#ifndef _UE__IMSI__put_request_H_
#define _UE__IMSI__put_request_H_


#include "_UE__IMSI__put_request_available_gNBs_inner.h"
#include <vector>
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// 
/// </summary>
class  _UE__IMSI__put_request
{
public:
    _UE__IMSI__put_request();
    virtual ~_UE__IMSI__put_request() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const _UE__IMSI__put_request& rhs) const;
    bool operator!=(const _UE__IMSI__put_request& rhs) const;

    /////////////////////////////////////////////
    /// _UE__IMSI__put_request members

    /// <summary>
    /// Average throughput in Mbps. Required if updating or creating.
    /// </summary>
    double getAverageThroughput() const;
    void setAverageThroughput(double const value);
    /// <summary>
    /// Latency in milliseconds. Required if updating or creating.
    /// </summary>
    int32_t getLatency() const;
    void setLatency(int32_t const value);
    /// <summary>
    /// Reference Signal Received Power in dBm. Optional if updating.
    /// </summary>
    int32_t getRSRP() const;
    void setRSRP(int32_t const value);
    bool rSRPIsSet() const;
    void unsetRSRP();
    /// <summary>
    /// Signal-to-Interference-plus-Noise Ratio in dB. Optional if updating.
    /// </summary>
    int32_t getSINR() const;
    void setSINR(int32_t const value);
    bool sINRIsSet() const;
    void unsetSINR();
    /// <summary>
    /// Channel Quality Indicator. Optional if updating.
    /// </summary>
    int32_t getCQI() const;
    void setCQI(int32_t const value);
    bool cQIIsSet() const;
    void unsetCQI();
    /// <summary>
    /// Reference Signal Received Quality. Optional if updating.
    /// </summary>
    int32_t getRSRQ() const;
    void setRSRQ(int32_t const value);
    bool rSRQIsSet() const;
    void unsetRSRQ();
    /// <summary>
    /// Block Error Rate in percentage. Optional if updating.
    /// </summary>
    int32_t getBLER() const;
    void setBLER(int32_t const value);
    bool bLERIsSet() const;
    void unsetBLER();
    /// <summary>
    /// List of available gNB and their respective RSRP and RSSI in dBm. Optional if updating.
    /// </summary>
    std::vector<org::openapitools::server::model::_UE__IMSI__put_request_available_gNBs_inner> getAvailableGNBs() const;
    void setAvailableGNBs(std::vector<org::openapitools::server::model::_UE__IMSI__put_request_available_gNBs_inner> const& value);
    bool availableGNBsIsSet() const;
    void unsetAvailable_gNBs();

    friend  void to_json(nlohmann::json& j, const _UE__IMSI__put_request& o);
    friend  void from_json(const nlohmann::json& j, _UE__IMSI__put_request& o);
protected:
    double m_AverageThroughput;

    int32_t m_Latency;

    int32_t m_RSRP;
    bool m_RSRPIsSet;
    int32_t m_SINR;
    bool m_SINRIsSet;
    int32_t m_CQI;
    bool m_CQIIsSet;
    int32_t m_RSRQ;
    bool m_RSRQIsSet;
    int32_t m_BLER;
    bool m_BLERIsSet;
    std::vector<org::openapitools::server::model::_UE__IMSI__put_request_available_gNBs_inner> m_Available_gNBs;
    bool m_Available_gNBsIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* _UE__IMSI__put_request_H_ */
