/**
* E2 Node UE API
* No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
*
* The version of the OpenAPI document: 1.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "_UE__IMSI__put_request.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

_UE__IMSI__put_request::_UE__IMSI__put_request()
{
    m_AverageThroughput = 0.0;
    m_Latency = 0;
    m_RSRP = 0;
    m_RSRPIsSet = false;
    m_SINR = 0;
    m_SINRIsSet = false;
    m_CQI = 0;
    m_CQIIsSet = false;
    m_RSRQ = 0;
    m_RSRQIsSet = false;
    m_BLER = 0;
    m_BLERIsSet = false;
    m_Available_gNBsIsSet = false;
    
}

void _UE__IMSI__put_request::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool _UE__IMSI__put_request::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool _UE__IMSI__put_request::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "_UE__IMSI__put_request" : pathPrefix;

                                     
    if (availableGNBsIsSet())
    {
        const std::vector<org::openapitools::server::model::_UE__IMSI__put_request_available_gNBs_inner>& value = m_Available_gNBs;
        const std::string currentValuePath = _pathPrefix + ".availableGNBs";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const org::openapitools::server::model::_UE__IMSI__put_request_available_gNBs_inner& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".availableGNBs") && success;
 
                i++;
            }
        }

    }
    
    return success;
}

bool _UE__IMSI__put_request::operator==(const _UE__IMSI__put_request& rhs) const
{
    return
    
    
    (getAverageThroughput() == rhs.getAverageThroughput())
     &&
    
    (getLatency() == rhs.getLatency())
     &&
    
    
    ((!rSRPIsSet() && !rhs.rSRPIsSet()) || (rSRPIsSet() && rhs.rSRPIsSet() && getRSRP() == rhs.getRSRP())) &&
    
    
    ((!sINRIsSet() && !rhs.sINRIsSet()) || (sINRIsSet() && rhs.sINRIsSet() && getSINR() == rhs.getSINR())) &&
    
    
    ((!cQIIsSet() && !rhs.cQIIsSet()) || (cQIIsSet() && rhs.cQIIsSet() && getCQI() == rhs.getCQI())) &&
    
    
    ((!rSRQIsSet() && !rhs.rSRQIsSet()) || (rSRQIsSet() && rhs.rSRQIsSet() && getRSRQ() == rhs.getRSRQ())) &&
    
    
    ((!bLERIsSet() && !rhs.bLERIsSet()) || (bLERIsSet() && rhs.bLERIsSet() && getBLER() == rhs.getBLER())) &&
    
    
    ((!availableGNBsIsSet() && !rhs.availableGNBsIsSet()) || (availableGNBsIsSet() && rhs.availableGNBsIsSet() && getAvailableGNBs() == rhs.getAvailableGNBs()))
    
    ;
}

bool _UE__IMSI__put_request::operator!=(const _UE__IMSI__put_request& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const _UE__IMSI__put_request& o)
{
    j = nlohmann::json::object();
    j["averageThroughput"] = o.m_AverageThroughput;
    j["latency"] = o.m_Latency;
    if(o.rSRPIsSet())
        j["RSRP"] = o.m_RSRP;
    if(o.sINRIsSet())
        j["SINR"] = o.m_SINR;
    if(o.cQIIsSet())
        j["CQI"] = o.m_CQI;
    if(o.rSRQIsSet())
        j["RSRQ"] = o.m_RSRQ;
    if(o.bLERIsSet())
        j["BLER"] = o.m_BLER;
    if(o.availableGNBsIsSet() || !o.m_Available_gNBs.empty())
        j["available_gNBs"] = o.m_Available_gNBs;
    
}

void from_json(const nlohmann::json& j, _UE__IMSI__put_request& o)
{
    j.at("averageThroughput").get_to(o.m_AverageThroughput);
    j.at("latency").get_to(o.m_Latency);
    if(j.find("RSRP") != j.end())
    {
        j.at("RSRP").get_to(o.m_RSRP);
        o.m_RSRPIsSet = true;
    } 
    if(j.find("SINR") != j.end())
    {
        j.at("SINR").get_to(o.m_SINR);
        o.m_SINRIsSet = true;
    } 
    if(j.find("CQI") != j.end())
    {
        j.at("CQI").get_to(o.m_CQI);
        o.m_CQIIsSet = true;
    } 
    if(j.find("RSRQ") != j.end())
    {
        j.at("RSRQ").get_to(o.m_RSRQ);
        o.m_RSRQIsSet = true;
    } 
    if(j.find("BLER") != j.end())
    {
        j.at("BLER").get_to(o.m_BLER);
        o.m_BLERIsSet = true;
    } 
    if(j.find("available_gNBs") != j.end())
    {
        j.at("available_gNBs").get_to(o.m_Available_gNBs);
        o.m_Available_gNBsIsSet = true;
    } 
    
}

double _UE__IMSI__put_request::getAverageThroughput() const
{
    return m_AverageThroughput;
}
void _UE__IMSI__put_request::setAverageThroughput(double const value)
{
    m_AverageThroughput = value;
}
int32_t _UE__IMSI__put_request::getLatency() const
{
    return m_Latency;
}
void _UE__IMSI__put_request::setLatency(int32_t const value)
{
    m_Latency = value;
}
int32_t _UE__IMSI__put_request::getRSRP() const
{
    return m_RSRP;
}
void _UE__IMSI__put_request::setRSRP(int32_t const value)
{
    m_RSRP = value;
    m_RSRPIsSet = true;
}
bool _UE__IMSI__put_request::rSRPIsSet() const
{
    return m_RSRPIsSet;
}
void _UE__IMSI__put_request::unsetRSRP()
{
    m_RSRPIsSet = false;
}
int32_t _UE__IMSI__put_request::getSINR() const
{
    return m_SINR;
}
void _UE__IMSI__put_request::setSINR(int32_t const value)
{
    m_SINR = value;
    m_SINRIsSet = true;
}
bool _UE__IMSI__put_request::sINRIsSet() const
{
    return m_SINRIsSet;
}
void _UE__IMSI__put_request::unsetSINR()
{
    m_SINRIsSet = false;
}
int32_t _UE__IMSI__put_request::getCQI() const
{
    return m_CQI;
}
void _UE__IMSI__put_request::setCQI(int32_t const value)
{
    m_CQI = value;
    m_CQIIsSet = true;
}
bool _UE__IMSI__put_request::cQIIsSet() const
{
    return m_CQIIsSet;
}
void _UE__IMSI__put_request::unsetCQI()
{
    m_CQIIsSet = false;
}
int32_t _UE__IMSI__put_request::getRSRQ() const
{
    return m_RSRQ;
}
void _UE__IMSI__put_request::setRSRQ(int32_t const value)
{
    m_RSRQ = value;
    m_RSRQIsSet = true;
}
bool _UE__IMSI__put_request::rSRQIsSet() const
{
    return m_RSRQIsSet;
}
void _UE__IMSI__put_request::unsetRSRQ()
{
    m_RSRQIsSet = false;
}
int32_t _UE__IMSI__put_request::getBLER() const
{
    return m_BLER;
}
void _UE__IMSI__put_request::setBLER(int32_t const value)
{
    m_BLER = value;
    m_BLERIsSet = true;
}
bool _UE__IMSI__put_request::bLERIsSet() const
{
    return m_BLERIsSet;
}
void _UE__IMSI__put_request::unsetBLER()
{
    m_BLERIsSet = false;
}
std::vector<org::openapitools::server::model::_UE__IMSI__put_request_available_gNBs_inner> _UE__IMSI__put_request::getAvailableGNBs() const
{
    return m_Available_gNBs;
}
void _UE__IMSI__put_request::setAvailableGNBs(std::vector<org::openapitools::server::model::_UE__IMSI__put_request_available_gNBs_inner> const& value)
{
    m_Available_gNBs = value;
    m_Available_gNBsIsSet = true;
}
bool _UE__IMSI__put_request::availableGNBsIsSet() const
{
    return m_Available_gNBsIsSet;
}
void _UE__IMSI__put_request::unsetAvailable_gNBs()
{
    m_Available_gNBsIsSet = false;
}


} // namespace org::openapitools::server::model

