/**
* E2 Node UE API
* No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
*
* The version of the OpenAPI document: 1.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * _UEs_get_200_response.h
 *
 * 
 */

#ifndef _UEs_get_200_response_H_
#define _UEs_get_200_response_H_


#include <string>
#include <vector>
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// 
/// </summary>
class  _UEs_get_200_response
{
public:
    _UEs_get_200_response();
    virtual ~_UEs_get_200_response() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const _UEs_get_200_response& rhs) const;
    bool operator!=(const _UEs_get_200_response& rhs) const;

    /////////////////////////////////////////////
    /// _UEs_get_200_response members

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::string> getImsisActive() const;
    void setImsisActive(std::vector<std::string> const& value);
    bool imsisActiveIsSet() const;
    void unsetImsisActive();
    /// <summary>
    /// 
    /// </summary>
    std::string getMessage() const;
    void setMessage(std::string const& value);
    bool messageIsSet() const;
    void unsetMessage();

    friend  void to_json(nlohmann::json& j, const _UEs_get_200_response& o);
    friend  void from_json(const nlohmann::json& j, _UEs_get_200_response& o);
protected:
    std::vector<std::string> m_ImsisActive;
    bool m_ImsisActiveIsSet;
    std::string m_Message;
    bool m_MessageIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* _UEs_get_200_response_H_ */
