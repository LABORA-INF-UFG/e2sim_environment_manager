/**
* E2 Node UE API
* No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
*
* The version of the OpenAPI document: 1.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * UEManagementApi.h
 *
 * 
 */

#ifndef UEManagementApi_H_
#define UEManagementApi_H_


#include "ApiBase.h"

#include <pistache/http.h>
#include <pistache/router.h>
#include <pistache/http_headers.h>

#include <optional>
#include <utility>

#include "_UE__IMSI__put_request.h"
#include "_UEs_get_200_response.h"
#include <string>

namespace org::openapitools::server::api
{

class  UEManagementApi : public ApiBase {
public:
    explicit UEManagementApi(const std::shared_ptr<Pistache::Rest::Router>& rtr);
    ~UEManagementApi() override = default;
    void init() override;

    static const std::string base;

private:
    void setupRoutes();

    void u_eimsi_delete_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void u_eimsi_put_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void u_es_get_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void ue_management_api_default_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);

    /// <summary>
    /// Helper function to handle unexpected Exceptions during Parameter parsing and validation.
    /// May be overridden to return custom error formats. This is called inside a catch block.
    /// Important: When overriding, do not call `throw ex;`, but instead use `throw;`.
    /// </summary>
    virtual std::pair<Pistache::Http::Code, std::string> handleParsingException(const std::exception& ex) const noexcept;

    /// <summary>
    /// Helper function to handle unexpected Exceptions during processing of the request in handler functions.
    /// May be overridden to return custom error formats. This is called inside a catch block.
    /// Important: When overriding, do not call `throw ex;`, but instead use `throw;`.
    /// </summary>
    virtual std::pair<Pistache::Http::Code, std::string> handleOperationException(const std::exception& ex) const noexcept;

    /// <summary>
    /// Unregister a mobile UE
    /// </summary>
    /// <remarks>
    /// Unregister a mobile UE based on their IMSI.
    /// </remarks>
    /// <param name="iMSI">International Mobile Subscriber Identity to be Unregistrered</param>
    virtual void u_eimsi_delete(const std::string &iMSI, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// Create or update information for a mobile UE
    /// </summary>
    /// <remarks>
    /// If the IMSI exists, update the metrics for the mobile UE. Otherwise, create a new mobile UE.
    /// </remarks>
    /// <param name="iMSI">International Mobile Subscriber Identity</param>
    /// <param name="uEIMSIPutRequest"></param>
    virtual void u_eimsi_put(const std::string &iMSI, const org::openapitools::server::model::_UE__IMSI__put_request &uEIMSIPutRequest, Pistache::Http::ResponseWriter &response) = 0;
    /// <summary>
    /// List all active UE&#39;s IMSIs
    /// </summary>
    /// <remarks>
    /// Retrieve a list of all IMSIs that are currently active on this E2 Node.
    /// </remarks>
    virtual void u_es_get(Pistache::Http::ResponseWriter &response) = 0;

};

} // namespace org::openapitools::server::api

#endif /* UEManagementApi_H_ */

